"""
BOX
"""
type Box {
  _debugColor: Color
  width: Int
  height: Int
}

"""
BUTTON
"""
enum ButtonVariant {
  TEXT
  CONTAINED
  OUTLINED
}

enum ButtonTheme {
  PRIMARY
  SECONDARY
  SUCCESS
  ERROR
}

enum ButtonSize {
  SMALL
  MEDIUM
  LARGE
}

interface Buttons {
  icon: String
  label: String
  action: Action
  disabled: Boolean!
  buttonSize: ButtonSize!
}

type Button implements Buttons {
  icon: String
  label: String
  action: Action
  disabled: Boolean!
  disableElevation: Boolean!
  buttonVariant: ButtonVariant!
  buttonTheme: ButtonTheme!
  buttonSize: ButtonSize!
}

type IconButton implements Buttons{
  label: String
  icon: String
  action: Action
  disabled: Boolean!
  buttonSize: ButtonSize!
}

type FavouriteButton implements Buttons {
  label: String
  signal: Signal
  icon: String
  action: Action
  disabled: Boolean!
  buttonSize: ButtonSize!
}
"""
CARD
"""
type Card {
  signal: Signal
  primary: String!
  secondaries: [String!]
  media: Image
  content: [String!]
  links: [Buttons!]
  action: Action
}
"""
CHIP
"""
type Chip{
  chipLabel : String,
}
"""
COLUMN
"""
type ColumnLayout {
  columns: [Column]
}

enum ColumnAlignment {
  LEFT
  RIGHT
  CENTER
}

interface Column {
  align: ColumnAlignment!
}
"""
IMAGE
"""
type Image {
  url: String!
  alt: String!
  width: Int
  height: Int
  valueType: ImageValueType
}

enum ImageValueType {
  PIXEL
  PERCENTAGE
}

"""
SIGNAL
"""
interface EmitSignals {
  emitSignals: [EmitSignal!]
}

type EmitSignal {
  signal: Signal!
  values: [SignalValuePair!]!
}

enum SignalValuePairKey {
  ICON
  CONTENT
  PRIMARY
}

type SignalValuePair {
  key: SignalValuePairKey!,
  value: SignalValuePairValue!
}

type SignalStringValue {
  text: String!
}

type SignalArrayValue {
  prefix: [String!]
  suffix: [String!]
  array: [String!]!
}

union SignalValuePairValue = SignalStringValue | SignalArrayValue

type Signal {
  type: SignalType!
  reference: String
}

input SignalInput {
  type: SignalType!
  reference: String
}

enum SignalType {
  TOGGLE
  UPDATE
  TITLE
  ERROR
}

"""
TYPOGRAPHY
"""
type Typography {
  signal: Signal
  value: String!
  typographyVariant: TypographyVariant!
  typographyTheme: TypographyTheme!
}

enum TypographyTheme {
  PRIMARY
  SECONDARY
}

enum TypographyVariant {
  H1
  H2
  H3
  H4
  H5
  H6
  BODY1
  BODY2
  SUBTITLE1
  SUBTITLE2
  CAPTION
  OVERLINE
}
"""
ACTION
"""
union Action = EditNameSubmitAction | URLAction | FavouriteAction

type URLAction {
  url: String!
  description: String
}

type EditNameSubmitAction {
  inputIds: [String!]!
  emitSignal: EmitSignal!
}
"""
Text Input
"""
type TextInput {
  formId: String!
  placeholder: String
}

type FavouriteAction {
  feedId: String!
  save: [EmitSignal!]
  unsave: [EmitSignal!]
}

"""
COLOR
"""
enum Color {
  PRIMARY
  SECONDARY
  ERROR
  WARNING
  INFO
  SUCCESS
}

